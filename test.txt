import configparser
import csv
from renko import Renko
import sys
from numpy import log as ln
import sqlite3 as sl

sys.setrecursionlimit(10000)

# Configparser init
cp = configparser.ConfigParser()
cp.read("config.ini")

# Variables
DB_PATH = cp["db"]["DbPath"]

# DB Connection
con = sl.connect(DB_PATH)

BINANCE_URL = cp["context"]["BinanceUrl"]
KLINE_PATH = cp["context"]["KlinePath"]

BRICKS = []
RESULTS = []

SYMBOL = "BTCUSDT"


def main():
    global RESULTS

    tick_data = get_tick_data()
    print("got close data")

    for i in range(250, 260):
        r = Renko(i, tick_data)
        r.create_renko()
        backtest(i, r.bricks, len(tick_data))

    sorted_charts = sorted(RESULTS, key=lambda i: i['score'], reverse=True)
    for _, i in enumerate(sorted_charts[:30]):
        print(i)


def backtest(brick_size, bricks, tick_count):
    global RESULTS

    balance = 0
    sign_changes = 0
    for i, b in enumerate(bricks):
        if i != 0:
            if bricks[i]["type"] == bricks[i - 1]["type"]:
                balance = balance + 1
            else:
                balance = balance - 2
                sign_changes = sign_changes + 1

    price_ratio = tick_count / len(bricks)

    score = balance / sign_changes
    if score >= 0 and price_ratio >= 1:
        score = ln(score + 1) * ln(price_ratio)
    else:
        score = -1.0

    RESULTS.append({"brick_size": brick_size, "score": score})
    print({"brick_size": brick_size, "score": score})


def get_tick_data():
    file = open("tickrecorder_slice.csv")
    csvreader = csv.reader(file)
    tick = []
    for row in csvreader:
        tick.append(float(row[1]))
    file.close()
    return tick


if __name__ == "__main__":
    main()
